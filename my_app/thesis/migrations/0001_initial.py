# Generated by Django 4.2.11 on 2024-05-12 13:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(default=None, upload_to='user/%Y/%m')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CommitteeMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_join', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('CT', 'Chủ tịch'), ('TK', 'Thư ký'), ('TV', 'Thành viên')], default='TV', max_length=10)),
                ('teacher_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'committee_member',
            },
        ),
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_title', models.CharField(max_length=50)),
                ('description', models.TextField(null=True)),
            ],
            options={
                'db_table': 'criteria',
            },
        ),
        migrations.CreateModel(
            name='Thesis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('product', models.FileField(default=None, null=True, upload_to='thesis/%Y/%m')),
                ('report', models.FileField(default=None, null=True, upload_to='thesis/%Y/%m')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'thesis',
            },
        ),
        migrations.CreateModel(
            name='ThesisDefenseCommittee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_end', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'thesis_defense_committee',
            },
        ),
        migrations.CreateModel(
            name='StudentDoThesis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('DN', 'Đã nộp'), ('DCD', 'Đang chấm điểm'), ('DCDX', 'Đã chấm điểm xong')], default='DN', max_length=20)),
                ('count_score', models.FloatField(blank=True, default=0.0, null=True)),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_user', to=settings.AUTH_USER_MODEL)),
                ('thesis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_thesis', to='thesis.thesis')),
                ('thesis_defense_committee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_thesis_defense_committee', to='thesis.thesisdefensecommittee')),
            ],
            options={
                'db_table': 'student_do_thesis',
                'unique_together': {('student', 'thesis')},
            },
        ),
        migrations.CreateModel(
            name='SpecificCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_specific_criteria', models.CharField(max_length=50)),
                ('points_1', models.TextField(blank=True, null=True)),
                ('points_2', models.TextField(blank=True, null=True)),
                ('points_3', models.TextField(blank=True, null=True)),
                ('points_4', models.TextField(blank=True, null=True)),
                ('points_5', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('criteria', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specific_criteria', to='thesis.criteria')),
            ],
            options={
                'db_table': 'specific_criteria',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('specific_criteria', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='score_specific_criteria', to='thesis.specificcriteria')),
                ('student_thesis', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='score_thesis', to='thesis.studentdothesis')),
                ('teacher_defense_commit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='score_committee_member', to='thesis.committeemember')),
            ],
            options={
                'db_table': 'score',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('message', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification',
            },
        ),
        migrations.AddField(
            model_name='committeemember',
            name='thesis_defense_committee',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_tdc_thesis', to='thesis.thesisdefensecommittee'),
        ),
        migrations.CreateModel(
            name='TeacherDoThesis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_join', models.DateTimeField(auto_now_add=True)),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teachers_user', to=settings.AUTH_USER_MODEL)),
                ('thesis_student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_student_thesis', to='thesis.studentdothesis')),
            ],
            options={
                'db_table': 'teacher_do_thesis',
                'unique_together': {('teacher', 'thesis_student')},
            },
        ),
    ]
